@use "sass:map";
@use "sass:list";
@use "@pepabo-inhouse/adapter/mixins" as adapter-mixins;
@use "@pepabo-inhouse/adapter/functions" as adapter-functions;
@use "./variables";
@use "./functions";

@mixin row($options: variables.$default-option) {
  $options: map.merge(variables.$default-option, $options);

  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: functions.compose-col-horizontal-gap(adapter-functions.get-boundary-size-first-key());
  box-sizing: border-box;

  &.-align-items-start {
    align-items: flex-start;
  }

  &.-align-items-center {
    align-items: center;
  }

  &.-align-items-end {
    align-items: flex-end;
  }

  &.-align-items-stretch {
    align-items: stretch;
  }

  &.-justify-content-start {
    justify-content: flex-start;
  }

  &.-justify-content-center {
    justify-content: center;
  }

  &.-justify-content-end {
    justify-content: flex-end;
  }

  &.-justify-content-around {
    justify-content: space-around;
  }

  &.-justify-content-between {
    justify-content: space-between;
  }

  &.-is-gapless {
    margin: 0;
    padding: 0;

    > * {
      margin: 0;
      padding: 0;
    }
  }
}

@mixin col($options: variables.$default-option) {
  $options: map.merge(variables.$default-option, $options);
  box-sizing: border-box;
  width: 100%;
  max-width: 100%;

  @for $i from 1 through variables.$total-col-count {
    &.-col-#{$i} {
      @include -col($i);
    }
  }

  @for $i from 0 through (variables.$total-col-count - 1) {
    &.-offset-#{$i} {
      @include -offset($options, $i);
    }
  }

  @each $boundary-size-level in adapter-functions.get-boundary-sizes() {
    @include adapter-mixins.mq-boundary(up, $boundary-size-level) {

      @for $i from 1 through variables.$total-col-count {
        &.-col-#{$boundary-size-level}-#{$i} {
          @include -col($i);
        }
      }

      @for $i from 0 through (variables.$total-col-count - 1) {
        &.-offset-#{$boundary-size-level}-#{$i} {
          @include -offset($options, $i);
        }
      }
    }
  }
  @include -col($count: map.get($options, count));
}

@mixin export {
  .in-row {
    @include row;
  }

  .in-col {
    @include col;
  }
}

@mixin -col($count) {
  grid-column: span $count;
}

@mixin -offset($options, $count) {
  @if functions.get-direction($options) == ltr {
    margin-left: functions.get-col-width($count);
  } @else if functions.get-direction($options) == rtl {
    margin-right: functions.get-col-width($count);
  }
}
