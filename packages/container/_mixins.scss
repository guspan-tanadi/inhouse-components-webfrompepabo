@use "sass:map";
@use "sass:list";
@use "@pepabo-inhouse/adapter/mixins" as adapter-mixins;
@use "@pepabo-inhouse/adapter/functions" as adapter-functions;
@use "./functions";
@use "./variables";

@mixin style($options: variables.$default-option) {
  $options: map.merge(variables.$default-option, $options);

  box-sizing: border-box;
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: functions.get-horizontal-gap(adapter-functions.get-boundary-size-first-key());
  padding-left: functions.get-horizontal-gap(adapter-functions.get-boundary-size-first-key());

  @if map.get($options, gapless) == true {
    @include -gapless-rule;
  } @else {
    @each $boundary-size-level in adapter-functions.get-boundary-sizes() {
      @include adapter-mixins.mq-boundary(up, $boundary-size-level) {
        padding-right: functions.get-horizontal-gap($boundary-size-level);
        padding-left: functions.get-horizontal-gap($boundary-size-level);
      }
    }
  }

  @each $content-size in adapter-functions.get-content-sizes() {
    &.-size-#{$content-size} {
      @include -size-rule($size: $content-size);
    }
  }

  @include -size-rule($size: map.get($options, size));

  &.-is-gapless {
    @include -gapless-rule;
  }
}

@mixin export {
  .in-container {
    @include style;
  }
}

@mixin -size-rule($size: m) {
  max-width: adapter-functions.get-content-size($level: $size);
}

@mixin -gapless-rule {
  padding-right: 0;
  padding-left: 0;
}
